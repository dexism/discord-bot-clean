// =agreed================================================================================
// TRPG„Çµ„Éù„Éº„ÉàDiscord„Éú„ÉÉ„Éà "„Éé„Ç®„É´" v3.8.5 („Çπ„É©„ÉÉ„Ç∑„É•„Ç≥„Éû„É≥„ÉâÂÆâÂÆöÂåñÁâà)
// =================================================================================

require('dotenv').config();
const { GoogleGenAI } = require('@google/genai');
const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, ButtonStyle, InteractionType } = require('discord.js');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
const express = require('express');

// --- „Éú„ÉÉ„Éà„ÅÆÂü∫Êú¨Ë®≠ÂÆö ---
const BOT_VERSION = 'v3.8.5';
const BOT_PERSONA_NAME = '„Éé„Ç®„É´';
const HISTORY_TIMEOUT = 3600 * 1000;
const GUILD_MASTER_NAME = '„ÇÆ„É´„Éâ„Éû„Çπ„Çø„Éº';
const PARTICIPANT_TRACKING_DURATION = 10 * 60 * 1000;

// --- „ÇØ„É©„Ç§„Ç¢„É≥„ÉàÂàùÊúüÂåñ ---
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY });
const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent]
});
const SPREADSHEET_ID = '1ZnpNdPhm_Q0IYgZAVFQa5Fls7vjLByGb3nVqwSRgBaw';
const creds = JSON.parse(process.env.GOOGLE_CREDENTIALS_JSON);

// --- Google„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàÈÄ£Êê∫Èñ¢Êï∞ ---
async function loadPersonaText() {
    try {
        const serviceAccountAuth = new JWT({
            email: creds.client_email,
            key: creds.private_key,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });
        const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);
        await doc.loadInfo();
        const personaSheet = doc.sheetsByTitle['PERSONA'];
        if (!personaSheet) {
            console.warn('[Persona Loader] Sheet "PERSONA" not found. Using default persona.');
            return null;
        }
        const rows = await personaSheet.getRows();
        const headers = personaSheet.headerValues;
        const personaLines = [];
        for (const row of rows) {
            const isEnabled = row.get(headers[0]);
            if (isEnabled === true || isEnabled === 'TRUE') {
                const text = row.get(headers[1]);
                if (text) personaLines.push(text);
            }
        }
        console.log(`[Persona Loader] Successfully loaded ${personaLines.length} persona lines.`);
        return personaLines.join('\n');
    } catch (error) {
        console.error("Error loading persona from Google Sheets:", error);
        return null;
    }
}

async function loadAndFormatAllDataForAI() {
    try {
        const serviceAccountAuth = new JWT({
            email: creds.client_email,
            key: creds.private_key,
            scopes: ['https://www.googleapis.com/auth/spreadsheets'],
        });
        const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);
        await doc.loadInfo();
        console.log("Successfully connected to Google Sheet document.");
        const initialHistoryWithDirectives = [];
        for (const sheet of doc.sheetsByIndex) {
            if (sheet.title === 'PERSONA') {
                console.log(`[Loader] Skipping special sheet: "${sheet.title}"`);
                continue;
            }
            console.log(`[Loader] Processing sheet: "${sheet.title}"`);
            await sheet.loadCells('A1:C1');
            const sheetEnabledValue = sheet.getCell(0, 0).value;
            if (sheetEnabledValue !== true && sheetEnabledValue !== 'TRUE') {
                console.log(`[Loader] Sheet "${sheet.title}" is disabled. Skipping.`);
                continue;
            }
            const userName = sheet.getCell(0, 1).value || GUILD_MASTER_NAME;
            const userMessageTemplate = sheet.getCell(0, 2).value;
            if (!userMessageTemplate) {
                console.warn(`[Loader] Sheet "${sheet.title}" is enabled but has no message template in C1. Skipping.`);
                continue;
            }
            const rows = await sheet.getRows();
            const headers = sheet.headerValues;
            const knowledgeLines = [];
            for (const row of rows) {
                const rowEnabledValue = row.get(headers[0]);
                if (rowEnabledValue !== true && rowEnabledValue !== 'TRUE') continue;
                const dataParts = [];
                for (let i = 1; i < headers.length; i++) {
                    const header = headers[i];
                    if (!header) continue;
                    const value = row.get(header);
                    if (value !== null && value !== undefined && value !== '') dataParts.push({ header, value });
                }
                if (dataParts.length === 0) continue;
                let line = "";
                if (dataParts.length === 1) {
                    line = `${dataParts[0].value}`;
                } else {
                    const lastPart = dataParts[dataParts.length - 1];
                    const headPartsRaw = dataParts.slice(0, dataParts.length - 1);
                    const headPartsFormatted = headPartsRaw.map(part => `${part.header}„Äå${part.value}„Äç`);
                    line = `${headPartsFormatted.join('„ÅÆ')}„ÅØ„ÄÅ${lastPart.value}`;
                }
                knowledgeLines.push(line);
            }
            if (knowledgeLines.length > 0) {
                const knowledgeText = knowledgeLines.join('\n');
                const userMessage = userMessageTemplate + '\n' + knowledgeText;
                initialHistoryWithDirectives.push(
                    { role: 'user', parts: [{ text: `User "${userName}": "${userMessage}"` }] },
                    { role: 'model', parts: [{ text: `${BOT_PERSONA_NAME}: "„ÅØ„ÅÑ„ÄÅ${userName}ÔºÅÂÖ®„Å¶ÊâøÁü•„ÅÑ„Åü„Åó„Åæ„Åó„ÅüÔºÅ"` }] }
                );
                console.log(`[Loader] Successfully loaded ${knowledgeLines.length} records from "${sheet.title}".`);
            }
        }
        console.log(`[Loader] Finished loading all data. Generated ${initialHistoryWithDirectives.length / 2} sets of memories.`);
        return initialHistoryWithDirectives;
    } catch (error) {
        console.error("Error loading game data from Google Sheets:", error);
        return null;
    }
}

// --- „Ç∞„É≠„Éº„Éê„É´Â§âÊï∞ ---
const channelHistories = new Map();
const channelParticipants = new Map();

// --- „Éò„É´„Éë„ÉºÈñ¢Êï∞ ---
const parseDiceCommand = (input) => {
    const match = input.match(/^!(\d+)d(\d+)$/i);
    if (!match) return null;
    const count = parseInt(match[1], 10), sides = parseInt(match[2], 10);
    return { count, sides };
};

const rollDice = (count, sides) => {
    let rolls = [];
    for (let i = 0; i < count; i++) { rolls.push(Math.floor(Math.random() * sides) + 1); }
    return rolls;
};

// --- BotËµ∑ÂãïÊôÇÂá¶ÁêÜ ---
client.once('clientReady', () => {
    console.log(`Logged in as ${client.user.tag} | Version: ${BOT_VERSION}`);
});

// --- „É°„ÉÉ„Çª„Éº„Ç∏Âèó‰ø°ÊôÇÂá¶ÁêÜ ---
client.on('messageCreate', async message => {
    if (message.author.bot) return;
    const command = message.content.trim();

    if (command.startsWith('!')) {
        const parsed = parseDiceCommand(command);
        if (parsed) {
            const { count, sides } = parsed;
            if (count > 100 || sides > 1000) { message.reply('„ÉÄ„Ç§„Çπ„ÅÆÊï∞„ÇÑÈù¢Êï∞„ÅåÂ§ö„Åô„Åé„Åæ„ÅôÔºà‰∏äÈôêÔºö100ÂÄã„ÄÅ1000Èù¢Ôºâ'); }
            else {
                const results = rollDice(count, sides);
                const total = results.reduce((a, b) => a + b, 0);
                message.reply(`üé≤ ${count}d${sides} „ÅÆÁµêÊûú: [${results.join(', ')}] ‚Üí ÂêàË®à: ${total}`);
            }
            return;
        }
    }

    try {
        const now = Date.now();
        const channelId = message.channel.id;

        if (!channelParticipants.has(channelId)) {
            channelParticipants.set(channelId, new Map());
        }
        const participants = channelParticipants.get(channelId);
        participants.set(message.author.id, now);

        const recentParticipants = new Set();
        for (const [userId, timestamp] of participants.entries()) {
            if (now - timestamp < PARTICIPANT_TRACKING_DURATION) {
                recentParticipants.add(userId);
            } else {
                participants.delete(userId);
            }
        }
        const participantCount = recentParticipants.size;
        console.log(`[Participant Logic] Active participants: ${participantCount}`);

        const isAddressedToNoelle = message.content.includes(BOT_PERSONA_NAME) || message.mentions.has(client.user);
        
        const loadedPersonaText = await loadPersonaText();
        const initialHistoryFromSheets = await loadAndFormatAllDataForAI();

        if (!initialHistoryFromSheets) {
            message.reply('„Åî„ÇÅ„Çì„Å™„Åï„ÅÑ„ÄÅ„ÇÆ„É´„Éâ„ÅÆÂè∞Â∏≥„Åå‰ªäË¶ã„Å§„Åã„Çâ„Å™„ÅÑ„Åø„Åü„ÅÑ‚Ä¶‚Ä¶');
            return;
        }
        
        let channelHistory = channelHistories.get(channelId);

        if (!channelHistory || (now - channelHistory.lastTimestamp > HISTORY_TIMEOUT)) {
            channelHistory = { 
                contents: JSON.parse(JSON.stringify(initialHistoryFromSheets)), 
                lastTimestamp: now 
            };
            channelHistories.set(channelId, channelHistory);
        }

        const userMessage = { role: 'user', parts: [{ text: `User "${message.author.displayName}": "${command}"` }] };
        channelHistory.contents.push(userMessage);
        channelHistory.lastTimestamp = now;
        
        let personaText = loadedPersonaText;
        if (!personaText) {
            personaText = `
### CORE DIRECTIVE: ROLE-PLAYING
You are a character named ${BOT_PERSONA_NAME}. NEVER break character. NEVER mention that you are an AI.
Your personality and all you know about the world are defined by the conversation history.
Your task is to continue the conversation naturally as your character.
You MUST respond in JAPANESE.
`;
        }
        
        const persona = { parts: [{ text: personaText }] };
        const request = {
            model: 'gemini-2.5-flash-lite',
            contents: channelHistory.contents,
            systemInstruction: persona
        };
        
        const generateContentWithRetry = async (request, maxRetries = 5) => {
            let lastError = null;
            for (let i = 0; i < maxRetries; i++) {
                try {
                    return await ai.models.generateContent(request);
                } catch (error) {
                    lastError = error;
                    if (error.toString().includes('429')) {
                        const delay = (2 ** i) * 1000 + Math.random() * 1000;
                        console.warn(`Rate limit exceeded. Retrying in ${Math.round(delay / 1000)}s...`);
                        await new Promise(resolve => setTimeout(resolve, delay));
                    } else { throw error; }
                }
            }
            console.error("All retries failed.");
            throw lastError;
        };

        const response = await generateContentWithRetry(request);
        const reply = response.candidates?.[0]?.content?.parts?.[0]?.text || '[IGNORE]';
        
        if (reply.includes('[IGNORE]')) {
            console.log('[Participant Logic] AI decided to ignore.');
            return; 
        }

        if (isAddressedToNoelle) {
            console.log('[Participant Logic] Addressed to Noelle. Replying.');
        } else {
            const replyProbability = 1 / (participantCount || 1);
            if (Math.random() > replyProbability) {
                console.log(`[Participant Logic] Not replying due to probability check (${replyProbability.toFixed(2)}).`);
                return;
            }
            console.log(`[Participant Logic] Replying based on probability (${replyProbability.toFixed(2)}).`);
        }
        
        let finalReply = reply.trim();
        const match = finalReply.match(/^(?:"?„Éé„Ç®„É´"?:\s*)?"?(.*?)"?$/);
        if (match && match[1]) {
            finalReply = match[1].trim();
        }
        
        message.reply(finalReply);
        channelHistory.contents.push({ role: 'model', parts: [{ text: `${BOT_PERSONA_NAME}: "${finalReply}"` }] });
        channelHistory.lastTimestamp = now;
        
    } catch (error) {
        console.error('Error in messageCreate:', error);
        message.reply('„ÅÇ„ÄÅ„Åô„Åø„Åæ„Åõ„Çì‚Ä¶‚Ä¶„Å°„Çá„Å£„Å®ËÄÉ„Åà„Åî„Å®„Çí„Åó„Å¶„Åæ„Åó„ÅüÔºÅ');
    }
});

// --- „Ç§„É≥„Çø„É©„ÇØ„Ç∑„Éß„É≥Ôºà„Ç≥„Éû„É≥„Éâ„Éª„Éú„Çø„É≥ÔºâÂèó‰ø°ÊôÇÂá¶ÁêÜ ---
const classDetails = {
    merchant: { 
        name: 'ÂïÜ‰∫∫', 
        description: "## **ÂïÜ‰∫∫**\n‰∫§Ê∏âÂäõ„Å®Â∏ÇÂ†¥ÊÑüË¶ö„Å´ÂÑ™„Çå„ÄÅÂéü‰æ°„ÇíÂæπÂ∫ïÁöÑ„Å´Ââä„Çã„Åì„Å®„ÅßÂà©Áõä„ÇíÊúÄÂ§ßÂåñ„Åô„Çã**ÂêàÁêÜÁöÑÁµåÂñ∂ËÄÖ**„ÄÇ‰ø°Áî®„ÇíÈáç„Çì„Åò„ÄÅÂÆüÂà©„ÇíËøΩÊ±Ç„Åó„Åæ„Åô„ÄÇ" 
    },
    artisan: { 
        name: 'ËÅ∑‰∫∫', 
        description: "## **ËÅ∑‰∫∫**\nÊäÄË°ìÂäõ„Å®ÂâµÈÄ†Âäõ„Å´ÁßÄ„Åß„ÅüËÅ∑‰∫∫„ÄÇÂ±ïÁ§∫‰ºö„ÅßÂêçÂ£∞„ÇíÈ´ò„ÇÅ„ÄÅÂîØ‰∏ÄÁÑ°‰∫å„ÅÆ„Éñ„É©„É≥„Éâ„ÇíÁØâ„Åç„Åæ„Åô„ÄÇ**Ëä∏Ë°ì„Å®ÂìÅË≥™„Çí‰∏°Á´ã„Åô„ÇãÂå†**„Åß„Åô„ÄÇ" 
    },
    leader: { 
        name: '„É™„Éº„ÉÄ„Éº', 
        description: "## **„É™„Éº„ÉÄ„Éº**\nÂú∞Âüü„Å®„ÅÆÁµÜ„ÇíÊ¥ª„Åã„Åó„ÄÅÂ∞ÇÂ±ûÂ•ëÁ¥Ñ„ÇÑÂú∞ÂÖÉË≥áÊ∫ê„ÅÆÊ¥ªÁî®„Å´Èï∑„Åë„Åü**Áµ±ÁéáËÄÖ**„ÄÇ‰ø°Áî®Â∫¶„ÅåÈùûÂ∏∏„Å´È´ò„Åè„ÄÅÂú∞ÂÖÉÊ∞ë„Åã„Çâ„ÅÆ‰ø°È†º„ÇÇÂéö„ÅÑ„ÅÆ„ÅåÁâπÂæ¥„Åß„Åô„ÄÇ" 
    },
    engineer: { 
        name: '„Ç®„É≥„Ç∏„Éã„Ç¢', 
        description: "## **„Ç®„É≥„Ç∏„Éã„Ç¢**\nÊäÄË°ìÂäõ„Å®ÂâµÈÄ†Âäõ„ÅåÁ™ÅÂá∫„Åó„ÅüÁ†îÁ©∂ËÄÖ„ÄÇÊñ∞Á¥†Êùê„ÇÑÈ≠îÈÅìÂÖ∑„ÅÆËûçÂêà„ÅßÁî£Ê•≠Èù©ÂëΩ„ÇíËµ∑„Åì„ÅôÂèØËÉΩÊÄß„ÇíÁßò„ÇÅ„Åü**ÊåëÊà¶ËÄÖ**„Åß„Åô„ÄÇ" 
    },
    magnate: { 
        name: '„Éû„Ç∞„Éä„Éº„Éà', 
        description: "## **„Éû„Ç∞„Éä„Éº„Éà**\nË§áÊï∞‰∫ãÊ•≠„ÇíÂêåÊôÇ„Å´Â±ïÈñã„Åô„Çã**ÁµåÊ∏àË≤¥Êóè**„ÄÇÁµÑÁπîÈÅ©ÂøúÂäõ„Å®Â∏ÇÂ†¥ÊÑüË¶ö„Å´ÂÑ™„Çå„ÄÅÈõáÁî®„ÉªËÇ≤Êàê„ÉªÊäïË≥á„Å´Èï∑„Åë„Å¶„ÅÑ„Åæ„Åô„ÄÇ" 
    },
    trader: { 
        name: '„Éà„É¨„Éº„ÉÄ„Éº', 
        description: "## **„Éà„É¨„Éº„ÉÄ„Éº**\n‰∫§Ê∏âÂäõ„Å®Â∏ÇÂ†¥ÊÑüË¶ö„Å´Èï∑„Åë„ÄÅÁÇ∫Êõø„ÇÑÈñ¢Á®é„ÇíÊìç„Çã**‰∫§Êòì„ÅÆÈÅî‰∫∫**„ÄÇÂõΩÈöõÁöÑ„Å™‰ø°È†º„ÇíÁØâ„Åç„ÄÅÂ§ñ‰∫§„Å®ÁµåÊ∏à„ÅÆÊû∂„ÅëÊ©ã„Å®„Å™„Çä„Åæ„Åô„ÄÇ" 
    },
};

client.on('interactionCreate', async interaction => {
    if (interaction.isChatInputCommand()) {
        const { commandName } = interaction;
        try {
            // ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ„Äê‰øÆÊ≠£„ÄëÂÖ®„Å¶„ÅÆ„Ç≥„Éû„É≥„Éâ„Åß„ÄÅÊúÄÂàù„Å´ deferReply „ÇíÂÆüË°å„Åô„Çã ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ
            if (commandName === 'ping' || commandName === 'ver' || commandName === 'menu') {
                // menu„Ç≥„Éû„É≥„Éâ„ÅØ„Éú„Çø„É≥„ÅåË°®Á§∫„Åï„Çå„Çã„ÅÆ„Åß„ÄÅephemeral„Åß„ÅØ„Å™„ÅÑÈÄöÂ∏∏„ÅÆÂøúÁ≠î„Çídefer„Åô„Çã
                await interaction.deferReply({ ephemeral: commandName !== 'menu' });
            }

            if (commandName === 'ping') {
                await interaction.editReply('Pong!');
            }
            else if (commandName === 'ver') {
                await interaction.editReply(`ÁèæÂú®„ÅÆÁßÅ„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅØ ${BOT_VERSION} „Åß„Åô`);
            }
            else if (commandName === 'menu') {
                const row = new ActionRowBuilder()
                    .addComponents(
                        new ButtonBuilder().setCustomId('menu_register').setLabel('„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã').setStyle(ButtonStyle.Success),
                        new ButtonBuilder().setCustomId('menu_status').setLabel('„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁ¢∫Ë™ç„Åô„Çã').setStyle(ButtonStyle.Primary),
                        new ButtonBuilder().setCustomId('menu_board').setLabel('‰æùÈ†ºÊé≤Á§∫Êùø„ÇíË¶ã„Çã').setStyle(ButtonStyle.Primary),
                        new ButtonBuilder().setCustomId('menu_leave').setLabel('Â∏∞„Çã').setStyle(ButtonStyle.Secondary)
                    );
                await interaction.editReply({ content: '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ„Åæ„ÅõÔºÅ„Å™„Å´„Çí„ÅäÊúõ„Åø„Åß„Åô„ÅãÔºü', components: [row] });
            }
        } catch(error) {
            console.error(`Error handling slash command ${commandName}:`, error);
        }
        return;
    }

    if (interaction.isButton()) {
        const [action, subAction, subject] = interaction.customId.split('_');
        try {
            if (action === 'menu') await handleMainMenu(interaction);
            else if (action === 'class') await handleClassMenu(interaction);
        } catch (error) {
            console.error('Error in button interaction:', error);
            if (!interaction.replied && !interaction.deferred) {
                await interaction.reply({ content: '„Åô„Åø„Åæ„Åõ„Çì„ÄÅ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ', ephemeral: true }).catch(() => {});
            } else {
                await interaction.editReply({ content: '„Åô„Åø„Åæ„Åõ„Çì„ÄÅ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ', components: [] }).catch(() => {});
            }
        }
    }
});

async function handleMainMenu(interaction) {
    const { customId } = interaction;
    if (customId === 'menu_register') {
        await interaction.update(getClassListComponents());
        return;
    }
    if (customId === 'menu_return') {
        const row = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder().setCustomId('menu_register').setLabel('„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÁôªÈå≤„Åô„Çã').setStyle(ButtonStyle.Success),
                new ButtonBuilder().setCustomId('menu_status').setLabel('„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁ¢∫Ë™ç„Åô„Çã').setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('menu_board').setLabel('‰æùÈ†ºÊé≤Á§∫Êùø„ÇíË¶ã„Çã').setStyle(ButtonStyle.Primary),
                new ButtonBuilder().setCustomId('menu_leave').setLabel('Â∏∞„Çã').setStyle(ButtonStyle.Secondary)
            );
        await interaction.update({ content: '„ÅÑ„Çâ„Å£„Åó„ÇÉ„ÅÑ„Åæ„ÅõÔºÅ„Å™„Å´„Çí„ÅäÊúõ„Åø„Åß„Åô„ÅãÔºü', components: [row] });
        return;
    }
    await interaction.deferReply({ ephemeral: true });
    let userActionText = '', replyText = '';
    switch (customId) {
        case 'menu_status': userActionText = '„Äå„Çπ„ÉÜ„Éº„Çø„Çπ„ÇíÁ¢∫Ë™ç„Åô„Çã„Äç„ÇíÈÅ∏„Çì„Å†'; replyText = '„ÅØ„ÅÑ„ÄÅ„Çπ„ÉÜ„Éº„Çø„Çπ„ÅÆÁ¢∫Ë™ç„Åß„Åô„Å≠„ÄÇÊâøÁü•„ÅÑ„Åü„Åó„Åæ„Åó„Åü„ÄÇÔºà‰ª•Èôç„ÅÆÂá¶ÁêÜ„ÅØÊú™ÂÆüË£Ö„Åß„ÅôÔºâ'; break;
        case 'menu_board': userActionText = '„Äå‰æùÈ†ºÊé≤Á§∫Êùø„ÇíË¶ã„Çã„Äç„ÇíÈÅ∏„Çì„Å†'; replyText = '„ÅØ„ÅÑ„ÄÅ„Åì„Å°„Çâ„Åå‰æùÈ†ºÊé≤Á§∫Êùø„Åß„Åô„ÄÇÔºà‰ª•Èôç„ÅÆÂá¶ÁêÜ„ÅØÊú™ÂÆüË£Ö„Åß„ÅôÔºâ'; break;
        case 'menu_leave': userActionText = '„ÄåÂ∏∞„Çã„Äç„ÇíÈÅ∏„Çì„Å†'; replyText = 'ÊâøÁü•„ÅÑ„Åü„Åó„Åæ„Åó„Åü„ÄÇ„Åæ„Åü„ÅäË∂ä„Åó„Åè„Å†„Åï„ÅÑ„Åæ„Åõ„ÄÇ'; break;
        default: await interaction.deleteReply(); return;
    }
    await interaction.editReply({ content: replyText });
    updateInteractionHistory(interaction, userActionText, replyText);
    const originalMessage = interaction.message;
    const disabledRow = ActionRowBuilder.from(originalMessage.components[0]);
    disabledRow.components.forEach(component => component.setDisabled(true));
    await originalMessage.edit({ components: [disabledRow] });
}

async function handleClassMenu(interaction) {
    const [action, subAction, subject] = interaction.customId.split('_');
    if (subAction === 'return' && subject === 'list') {
        await interaction.update(getClassListComponents());
        return;
    }
    if (subAction === 'details') {
        const classInfo = classDetails[subject];
        if (!classInfo) return;
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId(`class_select_${subject}`).setLabel(`${classInfo.name}„ÇíÈÅ∏Êäû„Åô„Çã`).setStyle(ButtonStyle.Success),
            new ButtonBuilder().setCustomId('class_return_list').setLabel('ÈÅ∏Êäû„É°„Éã„É•„Éº„Å´Êàª„Çã').setStyle(ButtonStyle.Secondary)
        );
        await interaction.update({ content: classInfo.description, components: [row] });
        return;
    }
    if (subAction === 'select') {
        await interaction.deferReply({ ephemeral: true });
        const classInfo = classDetails[subject];
        if (!classInfo) return;
        const userActionText = `„ÇØ„É©„Çπ„Å®„Åó„Å¶„Äå${classInfo.name}„Äç„ÇíÊúÄÁµÇÈÅ∏Êäû„Åó„Åü`;
        const replyText = `„ÅØ„ÅÑ„ÄÅ„ÅÇ„Å™„Åü„ÅÆ„ÇØ„É©„Çπ„ÅØ„Äå${classInfo.name}„Äç„Å´Ê±∫ÂÆö„Åó„Åæ„Åó„Åü„ÄÇ„Çà„ÅÜ„Åì„ÅùÔºÅÔºà‰ª•Èôç„ÅÆÂá¶ÁêÜ„ÅØÊú™ÂÆüË£Ö„Åß„ÅôÔºâ`;
        await interaction.editReply({ content: replyText });
        updateInteractionHistory(interaction, userActionText, replyText);
        const originalMessage = interaction.message;
        const disabledComponents = originalMessage.components.map(row => {
            const newRow = ActionRowBuilder.from(row);
            newRow.components.forEach(component => component.setDisabled(true));
            return newRow;
        });
        await originalMessage.edit({ components: disabledComponents });
    }
}

function getClassListComponents() {
    const content = "## **„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇØ„É©„ÇπÈÅ∏Êäû**\n„ÅÇ„Å™„Åü„ÅÆÁµåÂñ∂ËÄÖ„Å®„Åó„Å¶„ÅÆÁ¨¨‰∏ÄÊ≠©„ÅØ„ÄÅ„ÅÑ„Åö„Çå„Åã„ÅÆ„Äå„Éó„É©„Ç§„É†„ÇØ„É©„Çπ„Äç„Åã„ÇâÂßã„Åæ„Çä„Åæ„Åô„ÄÇ\n„Éó„É©„Ç§„É†„ÇØ„É©„Çπ„ÅØ„ÄÅÂÅ•ÂÖ®„Åß‰ø°È†º„Åï„Çå„ÇãÁµåÂñ∂„Çπ„Çø„Ç§„É´„Çí‰ΩìÁèæ„Åô„ÇãÂ≠òÂú®„Åß„Åô„ÄÇ\n„ÅÇ„Å™„Åü„ÅÆÈÅ∏Êäû„ÅØ„ÄÅ‰ªäÂæå„ÅÆÊà¶Áï•„Éª‰∫∫ËÑà„ÉªË©ïÂà§„Éª„Åù„Åó„Å¶‚ÄúÈóá‚Äù„Å∏„ÅÆÂèØËÉΩÊÄß„Çí„ÇÇÂ∑¶Âè≥„Åó„Åæ„Åô„ÄÇ\n\n**Ë©≥„Åó„ÅèÁü•„Çä„Åü„ÅÑ„ÇØ„É©„Çπ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ**";
    const row1 = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('class_details_merchant').setLabel('ÂïÜ‰∫∫„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËÅû„Åè').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('class_details_artisan').setLabel('ËÅ∑‰∫∫„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËÅû„Åè').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('class_details_leader').setLabel('„É™„Éº„ÉÄ„Éº„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËÅû„Åè').setStyle(ButtonStyle.Primary),
    );
    const row2 = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('class_details_engineer').setLabel('„Ç®„É≥„Ç∏„Éã„Ç¢„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËÅû„Åè').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('class_details_magnate').setLabel('„Éû„Ç∞„Éä„Éº„Éà„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËÅû„Åè').setStyle(ButtonStyle.Primary),
        new ButtonBuilder().setCustomId('class_details_trader').setLabel('„Éà„É¨„Éº„ÉÄ„Éº„Å´„Å§„ÅÑ„Å¶Ë©≥„Åó„ÅèËÅû„Åè').setStyle(ButtonStyle.Primary),
    );
    const row3 = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('menu_return').setLabel('„É°„Ç§„É≥„É°„Éã„É•„Éº„Å´Êàª„Çã').setStyle(ButtonStyle.Secondary)
    );
    return { content, components: [row1, row2, row3] };
}

function updateInteractionHistory(interaction, userActionText, replyText) {
    const channelId = interaction.channel.id;
    let channelHistory = channelHistories.get(channelId);
    if (!channelHistory) {
        channelHistory = { contents: [], lastTimestamp: Date.now() };
        channelHistories.set(channelId, channelHistory);
    }
    const now = Date.now();
    const userMessage = { role: 'user', parts: [{ text: `User "${interaction.user.displayName}": "${userActionText}"` }] };
    channelHistory.contents.push(userMessage);
    channelHistory.lastTimestamp = now;
    const modelMessage = { role: 'model', parts: [{ text: `${BOT_PERSONA_NAME}: "${replyText}"` }] };
    channelHistory.contents.push(modelMessage);
    channelHistory.lastTimestamp = now;
    console.log(`[Interaction Logic] User ${interaction.user.displayName} action: "${userActionText}". History updated.`);
}

// --- Discord„Éú„ÉÉ„Éà„ÅÆ„É≠„Ç∞„Ç§„É≥ ---
client.login(process.env.DISCORD_TOKEN);

// --- Render„Çπ„É™„Éº„ÉóÂØæÁ≠ñÁî®Web„Çµ„Éº„Éê„Éº ---
const app = express();
const port = process.env.PORT || 3000;
app.get('/', (req, res) => {
    res.send(`Hello! I am ${BOT_PERSONA_NAME}, Bot version ${BOT_VERSION}. I am awake!`); 
});
app.listen(port, () => { 
    console.log(`Fake server is running on port ${port} to prevent sleep.`); 
});